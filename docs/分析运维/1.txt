硬件自动化貌似是做不到的, 这也是我的弱项

DevOps:
	本身就是体现在持续上面
	这个事情就是运维的事情
		运维是做什么的?
			我曾经反复的思考并得出答案又思考答案
			环境
				需求、研发、部署环境
			是技术还是目标?
				我曾经是技术, 但是现在更多的是目标, 因为我看到了非常多的问题, 从技术点去解决问题是不够的, 需要目的
			是高级开发还是基础设施还是什么取决于什么角度去看, 其实也都是且可以并存
			高级开发和运维?
				运维貌似因为有服务器领域且只关注部署及运行质量, 但是实际上就技术而言, 部署这块的技能是完全重叠的, 只不过运维貌似更加专注且深厚(难道开发就不深厚了?)
				开发更加关注业务领域, 跟业务需求对接, 牵扯较大部分精力, 但是自动化开发是否能够解决? 我认为以后大概率是可以的, 那么的话其实运维和开发就会重叠起来, 而且随着自动化运维的兴起, 开发在运维领域会更加的有意义
			目前阶段2个角度都可行的, 但是第2个角度已经走了很长时间, 且2个角度都要持续的走好, 但是第一个角度还是不够, 我认为第1个角度算是一个极强的契机
			
	持续工作流程的打通、简化
		需求
			需求文档
			需求资料
			问题管理
			需求途径
		开发
			源码管理
			资料管理
			多线开发方式
		测试
			混沌测试
		部署
			源码检查
			项目镜像
			项目配置
			项目运行环境
			项目依赖的项目
				中间件
			项目监控
				metrics
				tracing


	其实哪有什么规划, 无非就是学习、接触的足够多了, 抽象联想的比较多了
	方案也无法就是在远和近的一个取舍, 我建议在技术复杂度上可以先简化
	架构设计其实也就是组合而已, 和方案几乎是重叠的
	实施落地其实就是调整, 或者说是调整落地顺序, 裁剪需求或者添加重要需求
	只有处于运维环境中才能收集到需求, 但是实际上处于运维环境中又很难收集到需求, 既要本身作为运维, 但是同时又要把自己思路放在开发的思路上
	

为什么人只有疏远了关系才能好?
	因为只有疏远了才能不被眼前的烦恼所吞噬、误导
	

研发其实就是crud+领域技能
	你需要用到什么领域就需要那个领域的技能, 然后再组合上你自己的需求
	
效率:
	对于运维来说: 能够减少我参与的地方就是效率提升的地方, 让我更加专注则效率越高
	对于开发俩说: 也是减少与运维接触则效率越高, 而且越熟悉、越能代码化表达、越机器执行则越高

智能化这个词被广泛的应用, 但是实际剖析这个词得到的确实另外几个词:
	数据化, 通过分析数据才能得到更好的数据
	数据和指令分层结合, 只有沉淀足够多的指令才能意味着能产生足够多的数据, 而且由于只有剥离数据才能使得指令和数据更加完美
		剥离数据之后指令和数据结合而成的业务就能运作在最大的场景中
		指令本身就是数据, 然后数据是能够沉淀且复用的, 指令是很难的
		
说实话学习技术其实本身是有一套方法论的:
	你可以先跑起来看看效果, 就完全按照别人的思路来走一遍
	然后结合自己的业务场景去改造
	然后你再去剖析事物、事情、组件、功能
	然后再去抽象、对比


	